const path = require('path');
const { assert, createTestApp, cleanupTestApp } = require('./_utils/test-setup.js');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–∑ —è–¥—Ä–∞. –ü—É—Ç—å —É–∫–∞–∑–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞.
const validateManifest = require('../packages/serverokey/core/validator');

/**
 * –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞.
 */
async function runValidatorTests() {
    console.log('--- Running Validator Tests ---');

    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
    // –ú—ã –±—É–¥–µ–º –≤—ã–∑—ã–≤–∞—Ç—å –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
    await test_validManifest_shouldPass();
    await test_missingRequiredSections_shouldFail();
    await test_connectorWithMissingType_shouldFail();
    await test_routeWithUndefinedComponent_shouldFail();
    await test_routeWithTypo_shouldSuggestCorrection();
    await test_actionRouteMissingUpdateOrRedirect_shouldFail();
    await test_actionRouteWithValidRedirect_shouldPass();
    
    console.log('--- Validator Tests Completed ---');
}

// --- –°—Ü–µ–Ω–∞—Ä–∏–∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---

async function test_validManifest_shouldPass() {
    console.log('Scenario: A completely valid manifest should produce zero issues.');
    const testName = 'validator-valid-manifest';
    let appPath;
    try {
        const manifest = {
            components: { main: 'main.html' },
            connectors: { db: { type: 'in-memory', initialState: {} } },
            routes: {
                'GET /': { type: 'view', layout: 'main' }
            }
        };
        appPath = await createTestApp(testName, manifest);
        // –°–æ–∑–¥–∞–¥–∏–º —Ñ–µ–π–∫–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ—à–ª–∞
        await require('fs/promises').writeFile(path.join(appPath, 'app', 'components', 'main.html'), '<div></div>');

        const issues = validateManifest(manifest, appPath);

        assert(issues.length === 0, 'Expected 0 issues for a valid manifest.');

    } finally {
        if (appPath) await cleanupTestApp(appPath);
    }
}

async function test_missingRequiredSections_shouldFail() {
    console.log('Scenario: A manifest missing a required section (e.g., "routes") should fail.');
    const testName = 'validator-missing-sections';
    let appPath;
    try {
        // –ó–∞–≤–µ–¥–æ–º–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç –±–µ–∑ —Å–µ–∫—Ü–∏–∏ `routes`
        const manifest = {
            components: { main: 'main.html' },
            connectors: { db: { type: 'in-memory', initialState: {} } },
        };
        appPath = await createTestApp(testName, manifest);

        const issues = validateManifest(manifest, appPath);

        assert(issues.length > 0, 'Expected at least one issue for missing sections.');
        assert(
            issues.some(issue => issue.level === 'error' && issue.message.includes("'routes' is missing")),
            'Expected an error message about the missing "routes" section.'
        );

    } finally {
        if (appPath) await cleanupTestApp(appPath);
    }
}

async function test_connectorWithMissingType_shouldFail() {
    console.log('Scenario: A connector missing the "type" property should fail.');
    const testName = 'validator-connector-no-type';
    let appPath;
    try {
        const manifest = {
            components: {},
            // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
            connectors: { db: { initialState: {} } }, 
            routes: {}
        };
        appPath = await createTestApp(testName, manifest);

        const issues = validateManifest(manifest, appPath);
        
        assert(issues.length === 1, 'Expected exactly one issue.');
        assert(issues[0].level === 'error', 'Issue level should be "error".');
        assert(
            issues[0].message.includes("missing the 'type' property"),
            'Error message should mention the missing "type" property.'
        );

    } finally {
        if (appPath) await cleanupTestApp(appPath);
    }
}

async function test_routeWithUndefinedComponent_shouldFail() {
    console.log('Scenario: A view route using a non-existent layout component should fail.');
    const testName = 'validator-undefined-component';
    let appPath;
    try {
        const manifest = {
            components: { correctLayout: 'correct.html' },
            connectors: {},
            routes: {
                'GET /': { type: 'view', layout: 'wrongLayout' } // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π layout
            }
        };
        appPath = await createTestApp(testName, manifest);

        const issues = validateManifest(manifest, appPath);
        
        assert(issues.length > 0, 'Expected issues for an undefined component.');
        assert(
            issues.some(issue => issue.message.includes("'wrongLayout' is not defined")),
            'Error message should mention the undefined layout component.'
        );

    } finally {
        if (appPath) await cleanupTestApp(appPath);
    }
}

async function test_routeWithTypo_shouldSuggestCorrection() {
    console.log('Scenario: The validator should suggest corrections for common typos.');
    const testName = 'validator-typo-suggestion';
    let appPath;
    try {
        const manifest = {
            components: { myComponent: 'my.html' },
            connectors: {},
            routes: {
                'GET /': { type: 'view', layout: 'myComponant' } // –û–ø–µ—á–∞—Ç–∫–∞ –≤ –∏–º–µ–Ω–∏
            }
        };
        appPath = await createTestApp(testName, manifest);

        const issues = validateManifest(manifest, appPath);
        
        assert(issues.length > 0, 'Expected issues for a typo.');
        const relevantIssue = issues.find(issue => issue.category.includes('GET /'));
        assert(relevantIssue, 'An issue for the route "GET /" should exist.');
        assert(
            relevantIssue.suggestion.includes('Did you mean "myComponent"?'),
            'Expected a suggestion for the typo.'
        );

    } finally {
        if (appPath) await cleanupTestApp(appPath);
    }
}

async function test_actionRouteMissingUpdateOrRedirect_shouldFail() {
    console.log('Scenario: An action route without "update" or "client:redirect" should fail.');
    const testName = 'validator-action-no-update';
    let appPath;
    try {
        const manifest = {
            components: {},
            connectors: {},
            routes: {
                'POST /do': {
                    type: 'action',
                    steps: [] // –ù–µ—Ç –Ω–∏ update, –Ω–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
                }
            }
        };
        appPath = await createTestApp(testName, manifest);

        const issues = validateManifest(manifest, appPath);

        assert(issues.length > 0, 'Expected an issue for the action route.');
        assert(
            issues.some(i => i.message.includes("missing 'update' property and does not perform a 'client:redirect'")),
            'Error message should state that "update" or "redirect" is required.'
        );
        
    } finally {
        if (appPath) await cleanupTestApp(appPath);
    }
}

async function test_actionRouteWithValidRedirect_shouldPass() {
    console.log('Scenario: An action route with a "client:redirect" step should pass validation.');
    const testName = 'validator-action-with-redirect';
    let appPath;
    try {
        const manifest = {
            components: {},
            connectors: {},
            routes: {
                'POST /do': {
                    type: 'action',
                    steps: [
                        { "client:redirect": "'/somewhere'" } // –ï—Å—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç, 'update' –Ω–µ –Ω—É–∂–µ–Ω
                    ]
                }
            }
        };
        appPath = await createTestApp(testName, manifest);

        const issues = validateManifest(manifest, appPath);

        assert(issues.length === 0, 'Expected 0 issues for a valid action route with redirect.');
        
    } finally {
        if (appPath) await cleanupTestApp(appPath);
    }
}


// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
runValidatorTests().catch(err => {
    console.error(`\nüî• A fatal error occurred during validator tests:`, err);
    process.exit(1);
});