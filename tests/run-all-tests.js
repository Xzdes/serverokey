#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs/promises');

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.
 * @param {string} filePath - –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É.
 * @returns {Promise<void>} –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
 *                          –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ.
 */
async function runTest(filePath) {
    return new Promise((resolve, reject) => {
        const testName = path.basename(filePath);
        console.log(`\n\n===== Running test: ${testName} =====\n`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤ –¥–æ—á–µ—Ä–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–∑–æ–ª—è—Ü–∏—é.
        // –û—à–∏–±–∫–∞ –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º —Ç–µ—Å—Ç–µ –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –¥—Ä—É–≥–∏–µ.
        const child = spawn('node', [filePath], {
            // –ù–∞—Å–ª–µ–¥—É–µ–º stdio, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—ã–≤–æ–¥ —Ç–µ—Å—Ç–∞ (–≤–∫–ª—é—á–∞—è —Ü–≤–µ—Ç–∞) –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
            // –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –ª–æ–≥ —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –º—ã –∑–∞–ø—É—Å–∫–∞–ª–∏ –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é.
            stdio: 'inherit' 
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        child.on('close', (code) => {
            if (code !== 0) {
                // –ï—Å–ª–∏ –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –Ω–µ–Ω—É–ª–µ–≤–æ–π, –∑–Ω–∞—á–∏—Ç, —Ç–µ—Å—Ç —É–ø–∞–ª.
                // –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–æ–º–∏—Å —Å –æ—à–∏–±–∫–æ–π, —á—Ç–æ –ø—Ä–µ—Ä–≤–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞.
                reject(new Error(`Test failed: ${testName} (exited with code ${code})`));
            } else {
                // –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ (–∫–æ–¥ –≤—ã—Ö–æ–¥–∞ 0), —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–º–∏—Å.
                console.log(`\n‚úÖ PASSED: ${testName}`);
                resolve();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–∞–º–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å 'node')
        child.on('error', (err) => {
             reject(new Error(`Failed to start test process for ${testName}: ${err.message}`));
        });
    });
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.
 */
async function main() {
    console.log('üöÄ Starting all tests...');
    
    const testDir = __dirname;
    const allFilesInDir = await fs.readdir(testDir);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é –æ–± –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏.
    // –ú—ã –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å –Ω–∞—à–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã `*.test.js`.
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç.
    const testFiles = allFilesInDir
        .filter(f => f.endsWith('.test.js'))
        .map(f => path.join(testDir, f));

    if (testFiles.length === 0) {
        console.warn('‚ö†Ô∏è No test files found to run. Test files should end with ".test.js".');
        return;
    }

    console.log(`Found ${testFiles.length} test files to run:`);
    testFiles.forEach(file => console.log(`  - ${path.basename(file)}`));

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º.
    // –ï—Å–ª–∏ –ª—é–±–æ–π –∏–∑ `await runTest(file)` –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É (reject),
    // —Ü–∏–∫–ª `for...of` –ø—Ä–µ—Ä–≤–µ—Ç—Å—è, –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–π–¥–µ—Ç –≤ –±–ª–æ–∫ `catch` –Ω–∏–∂–µ.
    for (const file of testFiles) {
        await runTest(file);
    }
    
    // –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ.
    console.log('\n\n======================================');
    console.log(`üèÜ All ${testFiles.length} tests passed successfully!`);
    console.log('======================================');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∏ –ª–æ–≤–∏–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –∏–∑ `main`.
main().catch(error => {
    console.error('\n\n======================================');
    console.error(`üî• A test run failed. Aborting.`);
    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ –≤ runTest, –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Å—Ç–∞—Ç–∏—Ä—É–µ–º —Ñ–∞–∫—Ç.
    console.error('======================================');
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã CI/CD —Å–∏—Å—Ç–µ–º—ã –ø–æ–Ω—è–ª–∏, —á—Ç–æ —Å–±–æ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞.
    process.exit(1); 
});